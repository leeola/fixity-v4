diff --git b/vendor/github.com/gopherjs/gopherjs/build/build.go a/vendor/github.com/gopherjs/gopherjs/build/build.go
index 4f03722..f733301 100644
--- b/vendor/github.com/gopherjs/gopherjs/build/build.go
+++ a/vendor/github.com/gopherjs/gopherjs/build/build.go
@@ -11,14 +11,12 @@ import (
 	"io"
 	"io/ioutil"
 	"os"
-	"os/exec"
 	"path"
 	"path/filepath"
 	"strconv"
 	"strings"
 	"time"
 
-	"github.com/fsnotify/fsnotify"
 	"github.com/gopherjs/gopherjs/compiler"
 	"github.com/gopherjs/gopherjs/compiler/natives"
 	"github.com/kardianos/osext"
@@ -359,7 +357,6 @@ type Session struct {
 	options  *Options
 	Archives map[string]*compiler.Archive
 	Types    map[string]*types.Package
-	Watcher  *fsnotify.Watcher
 }
 
 func NewSession(options *Options) *Session {
@@ -376,19 +373,6 @@ func NewSession(options *Options) *Session {
 		Archives: make(map[string]*compiler.Archive),
 	}
 	s.Types = make(map[string]*types.Package)
-	if options.Watch {
-		if out, err := exec.Command("ulimit", "-n").Output(); err == nil {
-			if n, err := strconv.Atoi(strings.TrimSpace(string(out))); err == nil && n < 1024 {
-				fmt.Printf("Warning: The maximum number of open file descriptors is very low (%d). Change it with 'ulimit -n 8192'.\n", n)
-			}
-		}
-
-		var err error
-		s.Watcher, err = fsnotify.NewWatcher()
-		if err != nil {
-			panic(err)
-		}
-	}
 	return s
 }
 
@@ -400,9 +384,6 @@ func (s *Session) InstallSuffix() string {
 }
 
 func (s *Session) BuildDir(packagePath string, importPath string, pkgObj string) error {
-	if s.Watcher != nil {
-		s.Watcher.Add(packagePath)
-	}
 	buildPkg, err := NewBuildContext(s.InstallSuffix(), s.options.BuildTags).ImportDir(packagePath, 0)
 	if err != nil {
 		return err
@@ -462,9 +443,6 @@ func (s *Session) BuildImportPath(path string) (*compiler.Archive, error) {
 
 func (s *Session) buildImportPathWithSrcDir(path string, srcDir string) (*PackageData, *compiler.Archive, error) {
 	pkg, err := importWithSrcDir(path, srcDir, 0, s.InstallSuffix(), s.options.BuildTags)
-	if s.Watcher != nil && pkg != nil { // add watch even on error
-		s.Watcher.Add(pkg.Dir)
-	}
 	if err != nil {
 		return nil, nil, err
 	}
@@ -717,29 +695,3 @@ func hasGopathPrefix(file, gopath string) (hasGopathPrefix bool, prefixLen int)
 	}
 	return false, 0
 }
-
-func (s *Session) WaitForChange() {
-	s.options.PrintSuccess("watching for changes...\n")
-	for {
-		select {
-		case ev := <-s.Watcher.Events:
-			if ev.Op&(fsnotify.Create|fsnotify.Write|fsnotify.Remove|fsnotify.Rename) == 0 || filepath.Base(ev.Name)[0] == '.' {
-				continue
-			}
-			if !strings.HasSuffix(ev.Name, ".go") && !strings.HasSuffix(ev.Name, ".inc.js") {
-				continue
-			}
-			s.options.PrintSuccess("change detected: %s\n", ev.Name)
-		case err := <-s.Watcher.Errors:
-			s.options.PrintError("watcher error: %s\n", err.Error())
-		}
-		break
-	}
-
-	go func() {
-		for range s.Watcher.Events {
-			// consume, else Close() may deadlock
-		}
-	}()
-	s.Watcher.Close()
-}
diff --git b/vendor/github.com/gopherjs/gopherjs/tool.go a/vendor/github.com/gopherjs/gopherjs/tool.go
index 2938393..3be124a 100644
--- b/vendor/github.com/gopherjs/gopherjs/tool.go
+++ a/vendor/github.com/gopherjs/gopherjs/tool.go
@@ -109,9 +109,6 @@ func main() {
 					for i, name := range args {
 						name = filepath.ToSlash(name)
 						names[i] = name
-						if s.Watcher != nil {
-							s.Watcher.Add(name)
-						}
 					}
 					if err := s.BuildFiles(args, pkgObj, currentDirectory); err != nil {
 						return err
@@ -121,9 +118,6 @@ func main() {
 
 				for _, pkgPath := range args {
 					pkgPath = filepath.ToSlash(pkgPath)
-					if s.Watcher != nil {
-						s.Watcher.Add(pkgPath)
-					}
 					pkg, err := gbuild.Import(pkgPath, 0, s.InstallSuffix(), options.BuildTags)
 					if err != nil {
 						return err
@@ -143,11 +137,7 @@ func main() {
 				}
 				return nil
 			}, options, nil)
-
-			if s.Watcher == nil {
-				os.Exit(exitCode)
-			}
-			s.WaitForChange()
+			os.Exit(exitCode)
 		}
 	}
 
@@ -195,9 +185,6 @@ func main() {
 					pkgPath = filepath.ToSlash(pkgPath)
 
 					pkg, err := gbuild.Import(pkgPath, 0, s.InstallSuffix(), options.BuildTags)
-					if s.Watcher != nil && pkg != nil { // add watch even on error
-						s.Watcher.Add(pkg.Dir)
-					}
 					if err != nil {
 						return err
 					}
@@ -215,11 +202,7 @@ func main() {
 				}
 				return nil
 			}, options, nil)
-
-			if s.Watcher == nil {
-				os.Exit(exitCode)
-			}
-			s.WaitForChange()
+			os.Exit(exitCode)
 		}
 	}
 
